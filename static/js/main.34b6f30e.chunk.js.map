{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","role","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","newText","toUpperCase","showAlert","lowText","toLowerCase","repText","repeat","txt","split","join","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","data-bs-dismiss","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","title","aboutText","disabled","body","setInterval","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.34b6f30e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav\r\n        className={`navbar navbar-expand-lg bg-${props.mode} navbar-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          {/* <Link className=\"navbar-brand\" to=\"/\">\r\n            TextUtilities\r\n          </Link> */}\r\n          <a className=\"navbar-brand\" href=\"/textutils\">\r\n            TextUtilities\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  {props.title}\r\n                  //  props should be place inside {} in jsx \r\n                </a> */}\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                  {props.title}\r\n                  //  props should be place inside {} in jsx       \r\n                    </Link>  */}\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {/* <a className=\"nav-link\" href=\"#\">\r\n                  {props.aboutText}\r\n                </a> */}\r\n                {/* <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.aboutText}\r\n                </Link> */}\r\n              </li>\r\n              {/* <li className=\"nav-item dropdown\">\r\n            <a\r\n              className=\"nav-link dropdown-toggle\"\r\n              href=\"/\"\r\n              role=\"button\"\r\n              data-bs-toggle=\"dropdown\"\r\n              aria-expanded=\"false\"\r\n            >\r\n              Dropdown\r\n            </a>\r\n            <ul className=\"dropdown-menu\">\r\n              <li>\r\n                <a className=\"dropdown-item\" href=\"/\">\r\n                  Action\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <a className=\"dropdown-item\" href=\"/\">\r\n                  Another action\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <hr className=\"dropdown-divider\" />\r\n              </li>\r\n              <li>\r\n                <a className=\"dropdown-item\" href=\"/\">\r\n                  Something else here\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </li> */}\r\n              <li className=\"nav-item\">\r\n                {/* <a className=\"nav-link disabled\" href=\"#\">\r\n                  {props.disabled}\r\n                </a> */}\r\n                {/* <Link className=\"nav-link disabled\" to=\"/\">\r\n                  {props.disabled}\r\n                </Link> */}\r\n              </li>\r\n            </ul>\r\n            <div\r\n              className={`form-check form-switch text-${\r\n                props.mode === \"light\" ? \"dark\" : \"light\"\r\n              }`}\r\n            >\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                role=\"switch\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggleMode}\r\n              />\r\n              <label\r\n                className=\"form-check-label\"\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                Enable Dark Mode\r\n              </label>\r\n            </div>\r\n            {/* <form className=\"d-flex\" role=\"search\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\n// to specify the type of props: if the props are sent of different types then it'll throw an error in console\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string,\r\n  disabled: PropTypes.string,\r\n  // aboutText: PropTypes.string.isRequired,\r\n  // isRequired is specified if the values are needed to be passed as props\r\n};\r\n\r\n//default type and values will be displayed for props if its not specified:\r\nNavbar.propTypes = {\r\n  title: \"Default Text\",\r\n  aboutText: \"About text here\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"Enter text here \");\r\n  //text variable is updated using setText function using Hooks, i.e. useState\r\n  // text =\"new Text\"; wrong way to update any variable\r\n  //setText(\"new text\"); correct way to change the state\r\n\r\n  const handleUpClick = () => {\r\n    // console.log(\"upper case was clicked\" +text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercase!\", \"success\");\r\n  };\r\n\r\n  //if event is used then it should be placed as parameter\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"Text was entered\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleLowClick = () => {\r\n    // console.log(\"lowercase was clicked \"+text);\r\n    let lowText = text.toLowerCase();\r\n    setText(lowText);\r\n    props.showAlert(\"Converted to Lowercase!\", \"success\");\r\n  };\r\n\r\n  //repeat the text\r\n  const handleRepClick = () => {\r\n    let repText = text.repeat(2);\r\n    setText(repText);\r\n    props.showAlert(\"Text was repeated!\", \"success\");\r\n  };\r\n\r\n  //remove extra spaces\r\n  const handleExtraSpaces = () => {\r\n    let txt = text.split(/[ ]+/);\r\n    setText(txt.join(\" \"));\r\n    props.showAlert(\"Extra spaces was removed!\", \"success\");\r\n  };\r\n\r\n  //copy the text entered\r\n  const handleCopyText = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    text.setSelectionRange(0, 9999);\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text was Copied!\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    // console.log(\"clear text was clicked\");\r\n    setText(\"\");\r\n    props.showAlert(\"Text was cleared!\", \"danger\");\r\n  };\r\n  return (\r\n    <>\r\n      {/* using style inside div with 2{{  }}, 1 for js and another for object */}\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h2>{props.heading}</h2>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"myBox\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>\r\n          Convert To Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>\r\n          Convert To Lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleRepClick}>\r\n          Repeat Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopyText}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>\r\n          Clear Text\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h3>Your text summary</h3>\r\n        <p>\r\n          Words= {text.split(\" \").length - 1} and Text length= {text.length}{\" \"}\r\n          characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} minutes to read the text summary</p>\r\n        <br></br>\r\n        <h3>Preview </h3>\r\n        <h5>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter something in the text box above to preview it here\"}\r\n        </h5>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    // this happens because all JSX will be converted to javascript calls\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","// import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n// import About from \"./components/About\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport TextForm from \"./components/TextForm\";\r\nimport React, { useState } from \"react\";\r\nimport Alert from \"./components/Alert\";\r\n\r\n// import { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\"); //whether dark mode is enabled or not\r\n\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type,\r\n    });\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1500);\r\n  };\r\n  const toggleMode = () => {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"#042743\";\r\n      showAlert(\"Dark mode has been enabled\", \"success\");\r\n      document.title = \"TextUtils - Dark Mode\";\r\n      setInterval(() => {\r\n        document.title = \"TextUtils is Amazing Mode\";\r\n      }, 2000);\r\n      setInterval(() => {\r\n        document.title = \"Install TextUtils Now\";\r\n      }, 1000);\r\n    } else {\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"white\";\r\n      showAlert(\"Light mode has been enabled\", \"success\");\r\n      document.title = \"TextUtils - Light Mode\";\r\n    }\r\n  };\r\n  return (\r\n    // <div className=\"App\">\r\n    //   <header className=\"App-header\">\r\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n    //     <p>\r\n    //       Edit <code>src/App.js</code> and save to reload.\r\n    //     </p>\r\n    //     <a\r\n    //       className=\"App-link\"\r\n    //       href=\"https://reactjs.org\"\r\n    //       target=\"_blank\"\r\n    //       rel=\"noopener noreferrer\"\r\n    //     >\r\n    //       Learn React\r\n    //     </a>\r\n    //   </header>\r\n    // </div>\r\n    <>\r\n      {/* <Router> */}\r\n      <Navbar\r\n        title=\"TextUtils\"\r\n        aboutText=\"About textUtils\"\r\n        disabled=\"Text Disabled\"\r\n        mode={mode}\r\n        toggleMode={toggleMode}\r\n      />\r\n      <Alert alert={alert} />\r\n      <div className=\"container my-2\">\r\n        {/* <Routes> */}\r\n        {/* <Route exact path=\"/about\" element={<About />} />\r\n            <Route\r\n              exact path=\"/\"\r\n              element={ */}\r\n        <TextForm heading=\"Enter Your Text\" mode={mode} showAlert={showAlert} />\r\n        {/*      }\r\n           />\r\n           </Routes> */}\r\n        {/* <About /> */}\r\n      </div>\r\n      {/* </Router> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}